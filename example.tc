// already I am eating from this trashcan

// define ordinary module
mod example {

struct thing {
    x: i32,
    y: f64[],
    z: i32[1:10; 9:17],
}

pub fn f(x: i32, y: &f64[]) -> str {
    // while loop
    while x < 17 {
        x = x + 1;
        x += 3;

        /*
        print other_mod::y[x]; // Debug.Print
        other_mod::z @= "whatever";
        */
    }

    let v: var = nullptr;
    v = 23;
    v = nullptr;

    let o: obj = nullptr;

    return "lo siento";
}

// = Private Sub
fn do_something(x: /* ByRef Long */ &i32) {
    let y: i32, z: str = "string literal";

    if x != 7 {
        x /= 2; // inferred integer divide
    }

    for i: i32 = x > 7 ? 23 : 5 : 7 : 1 {
        // brutal
    }

    for x: obj in o.arr {
        // x.f(3);
        print x;
    }

    if x != 2 && `Application.WorksheetFunction("SIN", 7)` > 3 {
        print "what";
    }

    `Debug.Print "hi mom"`; // literal VBA
}

// pub fn f() {}

}

mod more_examples {
    fn is_null(o: obj) -> bool {
        return o === nullptr;
    }

    fn is_db_null(v: var) -> bool {
        return v == nullvar;
    }

    fn retobj() -> obj {
        if 9 > 7 {
            return nullptr;
        } else if 1 != 23 {
            return Sheet1.Range("B3");
        } else {
            return Sheet1.Range("A1");
        }
    }

    fn objasvar() -> var {
        if true {
            return nullptr;
        } else {
            return 7;
        }
    }

    fn arrays() {
        let x: i32[10];
        let y: obj[];
        let z: SomeType[2:17];

        let weird_str: str = "You're not\tmy \"supervisor\"";

        print retobj() !== retobj();

        other_mod::fun(x);

        let res: bool = other_mod::fun2(x, y, z);
    }
}

mod other_mod {
    pub fn fun(xs: &i32[]) {
        xs[1;2] = 3;
    }

    pub fn fun2(x: &i32[], y: &obj[], z: &SomeType[]) -> bool {
        return true;
    }
}
