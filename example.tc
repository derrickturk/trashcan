// already I am eating from this trashcan

// define ordinary module
mod example {

pub fn f(x: i32, y: f64[]) -> str {
    // while loop
    while x < 17 {
        x = x + 1;
        x += 3;
        print other_mod::y[x]; // Debug.Print
    }
    return "lo siento";
}

// = Private Sub
fn do_something(x: /* ByRef Long */ &i32) {
    let y: i32, z: var = "string literal";

    if x != 7 {
        x /= 2; // inferred integer divide
    }

    for x: i32 = 1 ? 23 : 5 : 7 : 1 {
        // brutal
    }

    for x: obj in o.arr {
        x.f(3);
        print x;
    }

    if x && `Application.WorksheetFunction("SIN", 7)` > 3 {
        print "what";
    }

    `Debug.Print "hi mom"`; // literal VBA
}

}
